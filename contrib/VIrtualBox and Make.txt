1.1 Install msys shell:
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download
From MinGW installation manager -> All packages -> MSYS
mark the following for installation:

msys-base-bin
msys-autoconf-bin
msys-automake-bin
msys-libtool-bin

then click on Installation -> Apply changes -> Apply

Make sure no mingw packages are checked for installation or present from a previous install. Only the above msys packages should be installed. 
*** IMPORTANT *** Also make sure that msys-gcc and msys-w32api packages are not installed.

1.2 Install MinGW-builds project toolchain:
Download http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.9.0/threads-posix/dwarf/i686-4.9.0-release-posix-dwarf-rt_v3-rev2.7z/download
and unpack it to C:\


1.3. Ensure that mingw-builds bin folder is set in your PATH environment variable. On Windows 7 your path should look something like:
Code:

C:\mingw32\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\

1.4 Additional checks:
C:\MinGW\bin should contain nothing but mingw-get.exe.
Your gcc -v output should be:
Code:

$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=C:/mingw32/bin/../libexec/gcc/i686-w64-mingw32/4.9.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../../../src/gcc-4.9.0/configure --host=i686-w64-mingw32 --build=i686-w64-mingw32 --target=i686-w64-mingw32 --prefix=/mingw32 --with-sysroot=/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32 --with-gxx-include-dir=/mingw32/i686-w64-mingw32/include/c++ --enable-shared --enable-static --disable-multilib --enable-languages=ada,c,c++,fortran,objc,obj-c++,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-libitm --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-sjlj-exceptions --with-dwarf2 --disable-isl-version-check --disable-cloog-version-check --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=i686 --with-tune=generic --with-libiconv --with-system-zlib --with-gmp=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-mpfr=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-mpc=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-isl=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-cloog=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --enable-cloog-backend=isl --with-pkgversion='i686-posix-dwarf-rev2, Built by MinGW-W64 project' --with-bugurl=http://sourceforge.net/projects/mingw-w64 CFLAGS='-O2 -pipe -I/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/include' CXXFLAGS='-O2 -pipe -I/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/include' CPPFLAGS= LDFLAGS='-pipe -L/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/lib -L/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/lib -L/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/lib'
Thread model: posix
gcc version 4.9.0 (i686-posix-dwarf-rev2, Built by MinGW-W64 project)


2. Download, unpack and build required dependencies.
I'll save them in c:\deps folder.

2.1 OpenSSL: http://www.openssl.org/source/openssl-1.0.1h.tar.gz
From a MinGw shell (C:\MinGW\msys\1.0\msys.bat), unpack the source archive with tar (this will avoid symlink issues) then configure and make:

cd /c/deps/
tar xvfz openssl-1.0.1h.tar.gz
cd openssl-1.0.1h
Configure no-shared no-dso mingw
make

2.2 Berkeley DB: http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz
We'll use version 4.8 to preserve binary wallet compatibility.
From a MinGW shell unpack the source archive, configure and make:
Code:

cd /c/deps/
tar xvfz db-4.8.30.NC.tar.gz
cd db-4.8.30.NC/build_unix
../dist/configure --enable-mingw --enable-cxx --disable-shared --disable-replication
make

2.3 Boost: http://sourceforge.net/projects/boost/files/boost/1.55.0/
Download either the zip or the 7z archive, unpack boost inside your C:\deps folder, then bootstrap and compile from a Windows command prompt:
Code:

cd C:\deps\boost_1_55_0\
bootstrap.bat mingw
b2 --build-type=complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset=gcc variant=release link=static threading=multi runtime-link=static stage

This will compile the required boost libraries and put them into the stage folder (C:\deps\boost_1_55_0\stage).
Note: make sure you don't use tarballs, as unix EOL markers can break batch files.


	
	
Building headless Bitcoin and Bitcoin-qt on Windows
March 05, 2013, 10:26:41 PM
	
 #1
Hi all, I recently went through the process of building bitcoind on windows.
I found the official build-msw.txt to be a bit lacking, so I thought that documenting the steps here on the forums could save some time to people wanting to compile their own windows binary. Wink

Please note this is mostly for testing purposes. Always use official executables on production environments.
The following instructions are intended for use with the latest 0.9.2.1. See additional notes if compiling an older 0.8.6 version.

1. Prepare your build system.
I strongly suggest setting up a clean windows virtual machine via Virtualbox or similar.

1.1 Install msys shell:
http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download
From MinGW installation manager -> All packages -> MSYS
mark the following for installation:

msys-base-bin
msys-autoconf-bin
msys-automake-bin
msys-libtool-bin

then click on Installation -> Apply changes

Make sure no mingw packages are checked for installation or present from a previous install. Only the above msys packages should be installed. Also make sure that msys-gcc and msys-w32api packages are not installed.

1.2 Install MinGW-builds project toolchain:
Download http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.9.0/threads-posix/dwarf/i686-4.9.0-release-posix-dwarf-rt_v3-rev2.7z/download
and unpack it to C:\

1.3. Ensure that mingw-builds bin folder is set in your PATH environment variable. On Windows 7 your path should look something like:
Code:

C:\mingw32\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\


1.4 Additional checks:
C:\MinGW\bin should contain nothing but mingw-get.exe.
Your gcc -v output should be:
Code:

$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=C:/mingw32/bin/../libexec/gcc/i686-w64-mingw32/4.9.0/lto-wrapper.exe
Target: i686-w64-mingw32
Configured with: ../../../src/gcc-4.9.0/configure --host=i686-w64-mingw32 --build=i686-w64-mingw32 --target=i686-w64-mingw32 --prefix=/mingw32 --with-sysroot=/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32 --with-gxx-include-dir=/mingw32/i686-w64-mingw32/include/c++ --enable-shared --enable-static --disable-multilib --enable-languages=ada,c,c++,fortran,objc,obj-c++,lto --enable-libstdcxx-time=yes --enable-threads=posix --enable-libgomp --enable-libatomic --enable-libitm --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --disable-sjlj-exceptions --with-dwarf2 --disable-isl-version-check --disable-cloog-version-check --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=i686 --with-tune=generic --with-libiconv --with-system-zlib --with-gmp=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-mpfr=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-mpc=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-isl=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --with-cloog=/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static --enable-cloog-backend=isl --with-pkgversion='i686-posix-dwarf-rev2, Built by MinGW-W64 project' --with-bugurl=http://sourceforge.net/projects/mingw-w64 CFLAGS='-O2 -pipe -I/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/include' CXXFLAGS='-O2 -pipe -I/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/include -I/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/include' CPPFLAGS= LDFLAGS='-pipe -L/home/nixman/mingw-gcc-4.9.0/i686-490-posix-dwarf-rt_v3-rev2/mingw32/opt/lib -L/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-zlib-static/lib -L/home/nixman/mingw-gcc-4.9.0/prerequisites/i686-w64-mingw32-static/lib'
Thread model: posix
gcc version 4.9.0 (i686-posix-dwarf-rev2, Built by MinGW-W64 project)



2. Download, unpack and build required dependencies.
I'll save them in c:\deps folder.

2.1 OpenSSL: http://www.openssl.org/source/openssl-1.0.1h.tar.gz
From a MinGw shell (C:\MinGW\msys\1.0\msys.bat), unpack the source archive with tar (this will avoid symlink issues) then configure and make:
Code:

cd /c/deps/
tar xvfz openssl-1.0.1h.tar.gz
cd openssl-1.0.1h
Configure no-shared no-dso mingw
make


2.2 Berkeley DB: http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz
We'll use version 4.8 to preserve binary wallet compatibility.
From a MinGW shell unpack the source archive, configure and make:
Code:

cd /c/deps/
tar xvfz db-4.8.30.NC.tar.gz
cd db-4.8.30.NC/build_unix
../dist/configure --enable-mingw --enable-cxx --disable-shared --disable-replication
make


2.3 Boost: http://sourceforge.net/projects/boost/files/boost/1.55.0/
Download either the zip or the 7z archive, unpack boost inside your C:\deps folder, then bootstrap and compile from a Windows command prompt:
Code:

cd C:\deps\boost_1_55_0\
bootstrap.bat mingw
b2 --build-type=complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread toolset=gcc variant=release link=static threading=multi runtime-link=static stage


This will compile the required boost libraries and put them into the stage folder (C:\deps\boost_1_55_0\stage).
Note: make sure you don't use tarballs, as unix EOL markers can break batch files.

2.4 Miniupnpc: http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.tar.gz
Unpack Miniupnpc to C:\deps, rename containing folder from "miniupnpc-1.9" to "miniupnpc" then from a Windows command prompt:
Code:

cd C:\deps\miniupnpc
mingw32-make -f Makefile.mingw init upnpc-static

2.5 protoc and libprotobuf:
Download and unpack http://protobuf.googlecode.com/files/protobuf-2.5.0.zip
Then from msys shell
Code:

cd /c/deps/protobuf-2.5.0
configure --disable-shared
make

2.6 qrencode:
Download and unpack http://prdownloads.sourceforge.net/libpng/libpng-1.6.12.tar.gz?download inside your deps folder then configure and make:
Code:

cd /c/deps/libpng-1.6.12
configure --disable-shared
make
cp .libs/libpng16.a .libs/libpng.a


Download and unpack http://fukuchi.org/works/qrencode/qrencode-3.4.3.tar.gz inside your deps folder then configure and make:
Code:

cd /c/deps/qrencode-3.4.3

LIBS="../libpng-1.6.12/.libs/libpng.a ../../mingw32/i686-w64-mingw32/lib/libz.a" \
png_CFLAGS="-I../libpng-1.6.12" \
png_LIBS="-L../libpng-1.6.12/.libs" \
configure --enable-static --disable-shared --without-tools

make

2.7 Qt 5 libraries:
Qt must be configured with ssl and zlib support.
Download and unpack Qt base and tools sources:
http://download.qt-project.org/official_releases/qt/5.3/5.3.1/submodules/qtbase-opensource-src-5.3.1.7z
http://download.qt-project.org/official_releases/qt/5.3/5.3.1/submodules/qttools-opensource-src-5.3.1.7z
Then from a windows command prompt (note that the following assumes qtbase has been unpacked in C:\Qt\5.3.1 and 
qttools have been unpacked in C:\Qt\qttools-opensource-src-5.3.1):
Code:

set INCLUDE=C:\deps\libpng-1.6.12;C:\deps\openssl-1.0.1h\include
set LIB=C:\deps\libpng-1.6.12\.libs;C:\deps\openssl-1.0.1h

cd C:\Qt\5.3.1
configure.bat -release -opensource -confirm-license -static -make libs -no-sql-sqlite -no-opengl -system-zlib -qt-pcre -no-icu -no-gif -system-libpng -no-libjpeg -no-freetype -no-angle -no-vcproj -openssl -no-dbus -no-audio-backend -no-wmf-backend -no-qml-debug

mingw32-make -j4

set PATH=%PATH%;C:\Qt\5.3.1\bin

cd C:\Qt\qttools-opensource-src-5.3.1
qmake qttools.pro
mingw32-make -j4


Note: consider using -j switch with mingw32-make to speed up compilation process. On a quad core -j4 or -j5 should give the best results.

With a texteditor edit BOOST_SUFFIX, INCLUDEPATHS and LIBPATHS in your C:\bitcoin-0.8.6\src\makefile.mingw according to your dependencies location:

BOOST_SUFFIX?=-mgw49-mt-s-1_55

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"/c/deps/boost_1_55_0" \
 -I"/c/deps/db-4.8.30.NC/build_unix" \
 -I"/c/deps/openssl-1.0.1h/include"
 
LIBPATHS= \
 -L"$(CURDIR)/leveldb" \
 -L"/c/deps/boost_1_55_0/stage/lib" \
 -L"/c/deps/db-4.8.30.NC/build_unix" \
 -L"/c/deps/openssl-1.0.1h"
 
 
 cd /c/GreenCoin-master/src
 make -f makefile.mingw
strip bitcoind.exe

Qt
# Dependency library locations can be customized with:
#    BOOST_INCLUDE_PATH, BOOST_LIB_PATH, BDB_INCLUDE_PATH,
#    BDB_LIB_PATH, OPENSSL_INCLUDE_PATH and OPENSSL_LIB_PATH respectively

BOOST_LIB_SUFFIX=-mgw49-mt-s-1_55
BOOST_INCLUDE_PATH=C:/deps/boost_1_55_0
BOOST_LIB_PATH=C:/deps/boost_1_55_0/stage/lib
BDB_INCLUDE_PATH=C:/deps/db-4.8.30.NC/build_unix
BDB_LIB_PATH=C:/deps/db-4.8.30.NC/build_unix
OPENSSL_INCLUDE_PATH=C:/deps/openssl-1.0.1h/include
OPENSSL_LIB_PATH=C:/deps/openssl-1.0.1h
MINIUPNPC_INCLUDE_PATH=C:/deps/
MINIUPNPC_LIB_PATH=C:/deps/miniupnpc
QRENCODE_INCLUDE_PATH=C:/deps/qrencode-3.4.3
QRENCODE_LIB_PATH=C:/deps/qrencode-3.4.3/.libs

Comment out genleveldb.commands for win32
Code:

    LIBS += -lshlwapi
    #genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\"$$QMAKE_CXXFLAGS $$QMAKE_CXXFLAGS_RELEASE\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a
}


flags for static build:
Code:

CONFIG += static


Code:

win32:QMAKE_LFLAGS *= -Wl,--large-address-aware -static


set PATH=%PATH%;C:\Qt\5.3.1\bin
cd C:\GreenCoin-Test-master\
qmake "USE_QRCODE=1" "USE_UPNP=1" "USE_IPV6=1" bitcoin-qt.pro
mingw32-make -f Makefile.Release
